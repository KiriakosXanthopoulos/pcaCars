load("C:/Users/kostas/Downloads/Chucalissa.RData")
View(Chucalissa)
load("C:/Users/kostas/Downloads/BrainsCC.RData")
View(BrainsCC)
library(Rcmdr)
list.files("C:\Users\kostas\Dropbox\coursera\Rprog\prog assign 1\rprog assign 1\specdata")
list.files("C:\\Users\\kostas\\Dropbox\\coursera\\Rprog\\prog assign 1\\rprog assign 1\\specdata")
007 <- read.csv("C:\\Users\\kostas\\Dropbox\\coursera\\Rprog\\prog assign 1\\rprog assign 1\\specdata\\007.csv")
head(007)
007 <- read.csv(C:\\Users\\kostas\\Dropbox\\coursera\\Rprog\\prog assign 1\\rprog assign 1\\specdata\\007.csv)
head(007)
head(006)
c007 <- read.csv("C:\\Users\\kostas\\Dropbox\\coursera\\Rprog\\prog assign 1\\rprog assign 1\\specdata\\007.csv")
head(c007)
length(c007)
dim(c007)
str(c007)
summary(c007)
names(c007)
c007[1, "sulfate"]
c007[1:3287, "sulfate"]
c007[38, "sulfate"]
View(`c007`)
c007[38, "sulfate"]
c007[which(c007$Date == 2004-09-26), "sulfate"]
c007[which(c007$Date == 2002-02-07), "sulfate"]
c007[which(c007$Date == "2002-02-07"), "sulfate"]
c007[38, ]
subset(c007$sulfate, c007$Date=="2002-02-07")
c007_start <- c007[1, "sulfate"]
c007_end <- c007[3287, "sulfate"]
c007_loss <- c007_start - c007_end
c007_loss
files <- list.files("C:\\Users\\kostas\\Dropbox\\coursera\\Rprog\\prog assign 1\\rprog assign 1\\specdata\\")
files
files[1]
files[2]
files[3:5]
head(read.csv(files[7]))
files <- list.files("C:\\Users\\kostas\\Dropbox\\coursera\\Rprog\\prog assign 1\\rprog assign 1\\specdata\\", full.names=TRUE)
files
head(read.csv(files[7]))
head(read.csv(files[7]))
c007_008 <- rbind(c007, read.csv(files[8]))
head(c007_008)
tail(c007_008)
Date_20020203 <- c007_008[which(c007_008$Date == 2002-02-03), ]
Date_20020203
View(`c007_008`)
for (i in 1:5) {print(i)}
for (l in 1:5) {print(l)}
for (l in 1:332) {print(l)}
compledata001to332 <- data.frame()
for (i in 1:5) {
compledata001to332 <- rbind(compledata001to332, read.csv(files_full[i]))
}
str(dat)
compledata001to332 <- data.frame()
for (i in 1:5) {compledata001to332 <- rbind(compledata001to332, read.csv(files[i]))}
str(compledata001to332)
View(compledata001to332)
View(compledata001to332)
compledata001to332 <- data.frame()
for (i in 1:332) {compledata001to332 <- rbind(compledata001to332, read.csv(files[i]))}
str(compledata001to332)
View(compledata001to332)
View(compledata001to332)
compledata001to332 <- data.frame()
for (i in 1:332) {compledata001to332 <- rbind(compledata001to332, read.csv(files[i]))}
View(compledata001to332)
View(compledata001to332)
for (i in 1:332) {print(i)}
compledata001to332
median(compledata001to332$sulfate)
median(compledata001to332$sulfate, na.rm=TRUE)
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
osteometry<-data.frame(osteometry)
osteometry <- data.frame(osteometry)
osteometry <- data.frame (osteometry)
Aiges_Sistada.G_Timenides_osteometry <- read.csv("C:/Users/kostas/Desktop/Aiges_Sistada G_Timenides_osteometry.csv")
View(Aiges_Sistada.G_Timenides_osteometry)
View(Aiges_Sistada.G_Timenides_osteometry)
View(Aiges_Sistada.G_Timenides_osteometry)
Aiges_Sistada.G_Timenides_osteometry <- read.csv("C:/Users/kostas/Desktop/Aiges_Sistada G_Timenides_osteometry.txt")
View(Aiges_Sistada.G_Timenides_osteometry)
View(Aiges_Sistada.G_Timenides_osteometry)
Aiges_Sistada.G_Timenides_osteometry <- read.csv("C:/Users/kostas/Desktop/Aiges_Sistada G_Timenides_osteometry.txt")
View(Aiges_Sistada.G_Timenides_osteometry)
Aiges_Sistada.G_Timenides_osteometry <- read.csv("C:/Users/kostas/Desktop/Aiges_Sistada G_Timenides_osteometry.csv", sep=";")
View(Aiges_Sistada.G_Timenides_osteometry)
install.packages("AnthropMMD")
StartMMD()
StartMMD {AnthropMMD}
StartMMD (AnthropMMD)
StartMMD
StartMMD()
datammd1 <- read.csv("C:\\Users\\kostas\\AppData\\Local\\Temp\\Rtmp2XMS9q\\datab5c4c9c3396")
View(datammd1)
StartMMD()
library(AnthropMMD)
library(AnthropMMD)
detach("package:AnthropMMD", unload=TRUE)
detach("package:tcltk", unload=TRUE)
StartMMD()
View(datammd1)
View(datammd1)
teeth.path <- read.csv("C:/Users/kostas/Dropbox/Ancient Biosocieties/Academia/r practice/teeth path.csv", sep=";")
View(teeth.path)
StartMMD()
StartMMD(teeth.path)
library("AnthropMMD", lib.loc="~/R/win-library/3.1")
StartMMD()
summary(teeth.path$car_d)
list(teeth.path$car_d)
install.packages("Rcmdr")
rcmdr
Rcmdr
Rcmdr()
library(Rcmdr)
na=99
99=na
numSummary(teeth.path[,"calc_d"], groups=teeth.path$max.age,
statistics=c("mean"), quantiles=c(0,.25,.5,.75,1), na.rm=TRUE)
numSummary(teeth.path[,"calc_d"],na.rm=TRUE, groups=teeth.path$max.age,
statistics=c("mean"), quantiles=c(0,.25,.5,.75,1))
View(teeth.path)
install.packages("geoCount")
install.packages("plotKML")
###################################################
library("gstat")
library("raster")
library("plotKML")
library("GSIF")
options(prompt = "R> ", continue = "+  ", width = 70, useFancyQuotes = FALSE)
rm(list = ls())
###################################################
plotKML.version <- sessionInfo()[["otherPkgs"]][["plotKML"]][["Version"]]
plotKML.env(show.env = FALSE)
###################################################
library("sp")
lat <- 37.423156
lon <- -122.084917
name <- "Google headquarters"
pnt <- data.frame(name, lat, lon)
coordinates(pnt) <- ~ lon + lat
proj4string(pnt) <- CRS("+proj=longlat +datum=WGS84")
###################################################
library("XML")
pnt.kml <- newXMLNode("kml")
h2 <- newXMLNode("Document", parent = pnt.kml)
h3 <- newXMLNode("name", "Google headquarters", parent = h2)
h4 <- newXMLNode("Folder", parent = pnt.kml[["Document"]])
txtc <- sprintf("<Placemark><Point><coordinates>\n    %.5f,%.5f,%.0f</coordinates></Point></Placemark>",
coordinates(pnt)[, 1], coordinates(pnt)[, 2], rep(0, length(pnt)))
parseXMLAndAdd(txtc, parent = h4)
pnt.kml
###################################################
library("plotKML")
data("eberg")
eberg <- eberg[runif(nrow(eberg)) < 0.2, ]
coordinates(eberg) <- ~ X + Y
proj4string(eberg) <- CRS("+init=epsg:31467")
###################################################
eberg.ll <- reproject(eberg)
###################################################
kml(eberg.ll["CLYMHT_A"], colour = CLYMHT_A)
###################################################
spplot(eberg.ll["CLYMHT_A"], edge.col = "black", alpha = 0.8, cex = seq(0.3, 3, length = 5))
###################################################
shape <- "http://maps.google.com/mapfiles/kml/pal2/icon18.png"
kml(eberg.ll, shape = shape, colour = CLYMHT_A, labels = SNDMHT_A,
altitude = SNDMHT_A * 10, extrude = TRUE)
###################################################
data("eberg_grid")
coordinates(eberg_grid) <- ~ x + y
gridded(eberg_grid) <- TRUE
proj4string(eberg_grid) <- CRS("+init=epsg:31467")
###################################################
kml_open("eberg.kml")
kml_layer(eberg_grid, colour = TWISRT6)
kml_layer(eberg.ll[1, ], colour = CLYMHT_A)
kml_close("eberg.kml")
###################################################
library("sp")
demo("meuse", echo = FALSE)
###################################################
library("GSIF")
omm <- fit.gstatModel(meuse, om ~ dist + ffreq, meuse.grid, family = gaussian(log))
om.rk <- predict(omm, meuse.grid)
###################################################
library("stpp")
data("fmd")
fmd0 <- data.frame(fmd)
coordinates(fmd0) <- c("X", "Y")
proj4string(fmd0) <- CRS("+init=epsg:27700")
fmd_sp <- as(fmd0, "SpatialPoints")
dates <- as.Date("2001-02-18") + fmd0$ReportedDay
library("spacetime")
fmd_ST <- STIDF(fmd_sp, dates, data.frame(ReportedDay = fmd0$ReportedDay))
data("northcumbria")
ln <- Line(northcumbria)
NC <- SpatialLines(list(Lines(list(ln), ID = "NC")))
proj4string(NC) <- CRS("+init=epsg:27700")
stplot(fmd_ST, sp.layout = list("sp.lines", NC), col.regions = SAGA_pal[[1]])
###################################################
kml(fmd_ST, colour = ReportedDay, colour_scale = SAGA_pal[[1]])
View(northcumbria)
View(northcumbria)
View(fmd)
per.capita <- read.csv("C:/Users/kostas/Downloads/per-capita.csv")
View(per.capita)
library(Rcmdr)
library(Rcmdr)
library(Rcmdr)
`buckberry.&.chamberlain.aging.innominate` <- read.csv("C:/Users/kostas/Dropbox/Ancient Biosocieties/r practice/buckberry & chamberlain aging innominate.csv")
View(`buckberry.&.chamberlain.aging.innominate`)
library(Rcmdr)
ageinnominate <- read.csv("C:/Users/kostas/Dropbox/Ancient Biosocieties/r practice/buckberry & chamberlain aging innominate.csv", stringsAsFactors=FALSE)
View(ageinnominate)
scatterplotMatrix(~AP+MA+MI+ST+TO | Sex, reg.line=lm, smooth=TRUE,
spread=FALSE, span=1, id.n=0, diagonal= 'density', by.groups=TRUE,
data=ageinnominate)
scatterplotMatrix(~AP+MA+MI+ST+TO | Sex, reg.line=lm, smooth=TRUE,spread=FALSE, span=1, id.n=0, diagonal= 'density', by.groups=TRUE, data=ageinnominate)
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='ancientbiosocieties', token='79AF11851073881F42940E3EC9381E70', secret='Sm0WlF6LziqlH4gmBiZ7FCKJVQB67ur7lcdD3NMK')
shinyData::shinyData()
qs = seq(from=min(x), to=max(x), length=20)
qs = seq(from=min(40), to=max(40), length=20)
prop = function(40) {
mean(x <= 40)
}
prop = function(40)
mean(x <= 40)
library(Rcmdr)
library(devtools)
install_github("jennybc/gapminder")
library(gapminder)
data(gapminder)
head(gapminder)
x<-c(gapminder$lifeExp, gapminder$year)
mean(lifeXPin1952$lifeExp <= 40)
mean(lifeXPin1952$lifeExp <= 60)-mean(lifeXPin1952$lifeExp <= 40)
find_rtools()
log10(cpop1952, Hist(pop, groups=country, scale="frequency", breaks=5,col="darkgray"))
log10(cpop1952, Hist(pop, scale="frequency", breaks=5,col="darkgray"))
log10(cpop1952)
find_rtools()
library(Rcmdr)
library(devtools)
find_rtools()
install_github("jennybc/gapminder")
library(gapminder)
data(gapminder)
head(gapminder)
library(Rcmdr)
a")
load("skew.RData")
load("skew.RData")
library(Rcmdr)
load("C:/Users/kostas/Dropbox/edx/PH525.1x/w1/w1.2/skew.RData")
dim(dat)
library(Rcmdr)
library(Rcmdr)
library(devtools)
find_rtools()
install_github("jennybc/gapminder")
library(gapminder)
data(gapminder)
head(gapminder)
load("C:/Users/kostas/Dropbox/edx/PH525.1x/w1/w1.2/skew.RData")
dim(dat)
View(gapminder)
View(gapminder)
load("C:/Users/kostas/Dropbox/edx/PH525.1x/w1/w1.2/skew.RData")
View(dat)
View(dat)
par(mfrow = c(3,3))
for (i in 1:9) {
**put your qqnorm call here**
}
par(mfrow = c(3,3))
for (i in 1:9) {
with(dat, qqPlot(V1, dist="norm", id.method="y", id.n=2, labels=rownames(dat)))
}
par(mfrow = c(1,1))
par(mfrow = c(3,3))
par(mfrow = c(3,3))
for (i in 1:9) {
with(dat, qqPlot(Vi, dist="norm", id.method="y", id.n=2, labels=rownames(dat)))
}
head(InsectSprays)
require(stats); require(graphics)
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data", varwidth = TRUE, col = "lightgray")
fm1 <- aov(count ~ spray, data = InsectSprays)
summary(fm1)
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0))
plot(fm1)
fm2 <- aov(sqrt(count) ~ spray, data = InsectSprays)
summary(fm2)
plot(fm2)
par(opar)
attach(InsectSprays)
attach(InsectSprays)
count
spray
InsSprays<-as.data.frame(InsectSprays)
View(InsSprays)
nstall.packages("UsingR")
install.packages("UsingR")
past.stats.thomas <- read.csv("C:/Users/kostas/Dropbox/Ancient Biosocieties/projects/36th EPHA/past stats thomas.csv")
View(past.stats.thomas)
library(rcmdr)
library(Rcmdr)
Delph <- read.csv("C:/Users/kostas/Dropbox (Ancient BioSocieties)/Ancient Biosocieties/funding/Delph.csv", sep=";")
View(Delph)
View(Delph)
Delphi <- read.csv("C:/Users/kostas/Dropbox (Ancient BioSocieties)/Ancient Biosocieties/funding/Delphi.csv")
View(Delphi)
install(Rcmdr)
library(Rcmdr)
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
updateR()
install.RStudio()
library(Rcmdr)
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# updating R
updateR()
# updating RStudio
install.RStudio()
library(Rcmdr)
library(installr)
installr()
install.packages("Rcmdr")
library(Rcmdr)
install(ICC)
install.packages("icc")
install.packages("ICC")
setwd("~/GitHub/pcaCars")
# cor = TRUE indicates that PCA is performed on
# standardized data (mean = 0, variance = 1)
pcaCars <- princomp(mtcars, cor = TRUE)
# view objects stored in pcaCars
names(pcaCars)
# proportion of variance explained
summary(pcaCars)
# scree plot
plot(pcaCars, type = "l")
# bar plot
plot(pcaCars)
